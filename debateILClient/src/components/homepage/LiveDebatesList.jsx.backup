import { useNavigate } from "react-router  return (
    <section className="mb-8">
      <h2 className="text-xl font-bold mb-4 text-red-600">
        🔴 Live Debates ({debates.length})
      </h2>
      {/* Horizontal scrollable grid */}
      <div className="overflow-x-auto">
        <div className="flex gap-4 pb-4" style={{ width: 'max-content' }}>
          {debates.map((debate) => (
            <ContentCard key={debate.id} className="p-6 flex-shrink-0 w-80">
              <div className="flex flex-col space-y-4 h-full">{/* Fixed width and consistent height */}port ContentCard from "../basic-ui/ContentCard";
import PrimaryButton from "../basic-ui/PrimaryButton";
import StatusBadge from "../basic-ui/StatusBadge";
import { getAvatarById } from "../../api/randomAvatar";

export default function LiveDebatesList({ debates }) {
  const navigate = useNavigate();

  // debates already filtered by HomePage - only live debates
  if (debates.length === 0) {
    return (
      <section className="mb-8">
        <h2 className="text-xl font-bold mb-4 text-red-600">🔴 Live Debates</h2>
        <div className="bg-gray-50 border border-gray-200 rounded-lg p-8 text-center">
          <p className="text-gray-500">
            No live debates at the moment. Check back later!
          </p>
        </div>
      </section>
    );
  }

  const handleJoinDebate = (debateId) => {
    navigate(`/debate/${debateId}`);
  };

  const formatTime = (dateString) => {
    return new Date(dateString).toLocaleTimeString("en-US", {
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const calculateDuration = (startTime) => {
    const start = new Date(startTime);
    const now = new Date();
    const diffMinutes = Math.floor((now - start) / (1000 * 60));
    return `${diffMinutes}m`;
  };

  return (
    <section className="mb-8">
      <h2 className="text-xl font-bold mb-4 text-red-600">
        🔴 Live Debates ({debates.length})
      </h2>
      <div className="space-y-4">
        {debates.map((debate) => (
          <ContentCard key={debate.id} className="p-6">
            <div className="flex flex-col space-y-4">
              {/* Header with live indicator */}
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-semibold text-gray-900">
                  {debate.topic}
                </h3>
                <StatusBadge variant="live">🔴 Live</StatusBadge>
              </div>

              {/* Live indicator animation */}
              <div className="flex items-center justify-center space-x-2 text-red-600 text-sm">
                <div className="w-2 h-2 bg-red-600 rounded-full animate-pulse"></div>
                <span className="font-medium">Discussion in progress</span>
              </div>

              {/* Live stats - focus on activity */}
              <div className="grid grid-cols-3 gap-4 text-sm border border-red-200 bg-red-50 rounded-lg p-3">
                <div className="text-center">
                  <span className="font-medium text-red-700">👥 Active</span>
                  <div className="text-lg font-bold text-red-800">
                    {debate.participants_count}/2
                  </div>
                </div>
                <div className="text-center">
                  <span className="font-medium text-red-700">💬 Arguments</span>
                  <div className="text-lg font-bold text-red-800">
                    {debate.arguments_count || 0}
                  </div>
                </div>
                <div className="text-center">
                  <span className="font-medium text-red-700">⏱️ Duration</span>
                  <div className="text-lg font-bold text-red-800">
                    {calculateDuration(debate.start_time)}
                  </div>
                </div>
              </div>

              {/* Participants - compact for live */}
              <div className="flex items-center justify-center gap-8 border-t border-gray-200 pt-4">
                {debate.user1 && (
                  <div className="flex items-center gap-2">
                    <img
                      src={getAvatarById(debate.user1.id)}
                      alt={debate.user1.firstName}
                      className="w-8 h-8 rounded-full border-2 border-blue-400"
                    />
                    <span className="font-medium text-blue-600">
                      {debate.user1.firstName} {debate.user1.lastName}
                    </span>
                  </div>
                )}

                <div className="text-lg font-bold text-gray-400">VS</div>

                {debate.user2 && (
                  <div className="flex items-center gap-2">
                    <img
                      src={getAvatarById(debate.user2.id)}
                      alt={debate.user2.firstName}
                      className="w-8 h-8 rounded-full border-2 border-red-400"
                    />
                    <span className="font-medium text-red-600">
                      {debate.user2.firstName} {debate.user2.lastName}
                    </span>
                  </div>
                )}
              </div>

              {/* Action Buttons - focused on joining */}
              <div className="flex space-x-3 pt-2">
                <PrimaryButton
                  variant="secondary"
                  onClick={() => handleJoinDebate(debate.id)}
                  className="flex-1"
                >
                  🎯 Join Live Debate
                </PrimaryButton>
                <PrimaryButton
                  variant="ghost"
                  onClick={() => handleJoinDebate(debate.id)}
                  size="small"
                >
                  ℹ️ Details
                </PrimaryButton>
              </div>
            </div>
          </ContentCard>
        ))}
      </div>
    </section>
  );
}
